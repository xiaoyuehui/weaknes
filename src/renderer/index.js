export default class Renderer {
  constructor(id) {
    let canvas = document.getElementById(id);
    this.context = canvas.getContext("2d");
    this.pointer = 0;
    this.width = 32;
    this.height = 30;
  }

  write(tile, palette) {
    const image = this.generateTileImage(tile, palette);
    const x = (this.pointer % this.width) * 8;
    const y = ((this.pointer - (this.pointer % this.width)) / this.width) * 8;

    if (this.pointer < this.width * this.height - 1) {
      this.pointer++;
    } else {
      this.pointer = 0;
    }

    this.context.putImageData(image, x, y);
  }

  generateTileImage(tile, palette) {
    const image = this.context.createImageData(8, 8);

    for (let i = 0; i < 64; i++) {
      const bit = tile[i];
      const color = this.color(palette[bit]);

      image.data[i * 4] = color[0];
      image.data[i * 4 + 1] = color[1];
      image.data[i * 4 + 2] = color[2];
      image.data[i * 4 + 3] = 255; // 透明度
    }

    return image;
  }

  color(colorId) {
    return [
      [0x75, 0x75, 0x75],
      [0x27, 0x1b, 0x8f],
      [0x00, 0x00, 0xab],
      [0x47, 0x00, 0x9f],
      [0x8f, 0x00, 0x77],
      [0xab, 0x00, 0x13],
      [0xa7, 0x00, 0x00],
      [0x7f, 0x0b, 0x00],
      [0x43, 0x2f, 0x00],
      [0x00, 0x47, 0x00],
      [0x00, 0x51, 0x00],
      [0x00, 0x3f, 0x17],
      [0x1b, 0x3f, 0x5f],
      [0x00, 0x00, 0x00],
      [0x00, 0x00, 0x00],
      [0x00, 0x00, 0x00],
      [0xbc, 0xbc, 0xbc],
      [0x00, 0x73, 0xef],
      [0x23, 0x3b, 0xef],
      [0x83, 0x00, 0xf3],
      [0xbf, 0x00, 0xbf],
      [0xe7, 0x00, 0x5b],
      [0xdb, 0x2b, 0x00],
      [0xcb, 0x4f, 0x0f],
      [0x8b, 0x73, 0x00],
      [0x00, 0x97, 0x00],
      [0x00, 0xab, 0x00],
      [0x00, 0x93, 0x3b],
      [0x00, 0x83, 0x8b],
      [0x00, 0x00, 0x00],
      [0x00, 0x00, 0x00],
      [0x00, 0x00, 0x00],
      [0xff, 0xff, 0xff],
      [0x3f, 0xbf, 0xff],
      [0x5f, 0x73, 0xff],
      [0xa7, 0x8b, 0xfd],
      [0xf7, 0x7b, 0xff],
      [0xff, 0x77, 0xb7],
      [0xff, 0x77, 0x63],
      [0xff, 0x9b, 0x3b],
      [0xf3, 0xbf, 0x3f],
      [0x83, 0xd3, 0x13],
      [0x4f, 0xdf, 0x4b],
      [0x58, 0xf8, 0x98],
      [0x00, 0xeb, 0xdb],
      [0x75, 0x75, 0x75],
      [0x00, 0x00, 0x00],
      [0x00, 0x00, 0x00],
      [0xff, 0xff, 0xff],
      [0xab, 0xe7, 0xff],
      [0xc7, 0xd7, 0xff],
      [0xd7, 0xcb, 0xff],
      [0xff, 0xc7, 0xff],
      [0xff, 0xc7, 0xdb],
      [0xff, 0xbf, 0xb3],
      [0xff, 0xdb, 0xab],
      [0xff, 0xe7, 0xa3],
      [0xe3, 0xff, 0xa3],
      [0xab, 0xf3, 0xbf],
      [0xb3, 0xff, 0xcf],
      [0x9f, 0xff, 0xf3],
      [0xbc, 0xbc, 0xbc],
      [0x00, 0x00, 0x00],
      [0x00, 0x00, 0x00]
    ][colorId];
  }
}
